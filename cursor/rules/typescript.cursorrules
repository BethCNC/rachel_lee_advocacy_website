# TypeScript Configuration and Component Guidelines

## TypeScript Setup
```json
// tsconfig.json
{
  "compilerOptions": {
    "target": "es6",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}
```

## Component Types

### Common Types
```typescript
// types/common.ts
export interface Accessibility {
  fontSize: 'small' | 'medium' | 'large';
  contrast: 'normal' | 'high';
  audioEnabled: boolean;
  reducedMotion: boolean;
}

export interface AudioContent {
  url: string;
  transcript: string;
  duration: number;
}

export interface ProgressState {
  current: number;
  total: number;
  completed: boolean;
}
```

## Component Inventory

### Core Interactive Components

1. **ConditionPathfinder**
```typescript
interface PathfinderStep {
  id: string;
  title: string;
  description: string;
  options: PathfinderOption[];
  audioGuidance?: AudioContent;
}

interface PathfinderOption {
  id: string;
  label: string;
  nextStepId: string;
  resourceIds?: string[];
}

interface PathfinderState {
  currentStep: PathfinderStep;
  history: string[];
  selectedOptions: Record<string, string>;
}
```

2. **ResourceCompass**
```typescript
interface Resource {
  id: string;
  title: string;
  type: ResourceType;
  description: string;
  tags: string[];
  conditions: string[];
  audioContent?: AudioContent;
}

interface ResourceFilter {
  types: ResourceType[];
  conditions: string[];
  tags: string[];
  searchTerm: string;
}
```

3. **CareJourneyMap**
```typescript
interface JourneyMilestone {
  id: string;
  title: string;
  date: Date;
  status: 'completed' | 'current' | 'upcoming';
  notes: string;
  resources: Resource[];
}

interface JourneyTimeline {
  milestones: JourneyMilestone[];
  currentIndex: number;
  startDate: Date;
}
```

### Form Components

1. **ConsultationBooking**
```typescript
interface ConsultationSlot {
  id: string;
  date: Date;
  duration: number;
  serviceType: string;
  available: boolean;
}

interface BookingForm {
  serviceType: string;
  preferredDate: Date;
  clientInfo: ClientInformation;
  concerns: string;
}
```

2. **AssessmentTool**
```typescript
interface Assessment {
  id: string;
  questions: AssessmentQuestion[];
  currentIndex: number;
  responses: Record<string, string>;
}

interface AssessmentQuestion {
  id: string;
  text: string;
  type: 'multiple' | 'single' | 'text';
  options?: string[];
  audioGuidance?: AudioContent;
}
```

### Accessibility Components

1. **AudioPlayer**
```typescript
interface AudioPlayerProps {
  content: AudioContent;
  autoPlay?: boolean;
  onComplete?: () => void;
  showTranscript?: boolean;
}
```

2. **ProgressTracker**
```typescript
interface ProgressTrackerProps {
  state: ProgressState;
  showPercentage?: boolean;
  showSteps?: boolean;
  onStepClick?: (step: number) => void;
}
```

### Layout Components

1. **NavigationMenu**
```typescript
interface MenuItem {
  id: string;
  label: string;
  path: string;
  children?: MenuItem[];
  icon?: string;
}

interface NavigationState {
  currentPath: string;
  breadcrumbs: MenuItem[];
  history: string[];
}
```

2. **ContentSection**
```typescript
interface ContentSectionProps {
  title: string;
  content: React.ReactNode;
  audioContent?: AudioContent;
  expandable?: boolean;
  initiallyExpanded?: boolean;
}
```

## Component Development Guidelines

### File Structure
```
components/
├── [ComponentName]/
│   ├── index.tsx
│   ├── [ComponentName].tsx
│   ├── [ComponentName].types.ts
│   ├── [ComponentName].styles.ts
│   ├── [ComponentName].test.tsx
│   └── [ComponentName].stories.tsx
```

### Component Template
```typescript
import React from 'react';
import { useAccessibility } from '@/hooks/useAccessibility';
import { ComponentProps } from './ComponentName.types';
import { StyledComponent } from './ComponentName.styles';

export const ComponentName: React.FC<ComponentProps> = ({
  prop1,
  prop2,
  children
}) => {
  const { fontSize, contrast, audioEnabled } = useAccessibility();

  return (
    <StyledComponent
      fontSize={fontSize}
      contrast={contrast}
      role="region"
      aria-label="Component description"
    >
      {children}
    </StyledComponent>
  );
};
```

### Styled Components
```typescript
import styled from 'styled-components';
import { theme } from '@/styles/theme';

export const StyledComponent = styled.div<{
  fontSize: string;
  contrast: string;
}>`
  font-size: ${({ fontSize }) => theme.fontSize[fontSize]};
  color: ${({ contrast }) => theme.colors[contrast].text};
  background: ${({ contrast }) => theme.colors[contrast].background};
`;
```

## Interactive Features Implementation

### State Management
```typescript
// Use React Context for global state
const GlobalStateContext = React.createContext<GlobalState>({});

// Use React Query for API data
const { data, isLoading } = useQuery(['key', params], fetchFunction);

// Use local state for component-specific state
const [state, setState] = useState<ComponentState>({});
```

### Accessibility Integration
```typescript
// Required for all interactive components
const InteractiveComponent: React.FC = () => {
  const { audioEnabled, fontSize } = useAccessibility();
  const [isFocused, setIsFocused] = useState(false);

  return (
    <div
      tabIndex={0}
      onFocus={() => setIsFocused(true)}
      onBlur={() => setIsFocused(false)}
      aria-live="polite"
    >
      {/* Component content */}
    </div>
  );
};
``` 