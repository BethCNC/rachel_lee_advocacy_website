# Content Migration Rules

## Source Data Location
```bash
web_scrape_umi/
├── scraped_data/
│   ├── site_content_*.json        # Raw content data
│   ├── analysis/
│   │   ├── content_distribution_*.json
│   │   ├── forms_analysis_*.csv
│   │   ├── navigation_analysis_*.json
│   │   └── ux_analysis_*.json
│   └── visualizations/
└── docs/
    └── sitemaps/
        └── rachel_lee_advocacy_sitemap_v2.html
```

## Content Types & Mapping

### 1. WordPress Custom Post Types
```php
// Register required post types
function register_rachel_lee_post_types() {
    // Conditions
    register_post_type('condition', [
        'public' => true,
        'has_archive' => true,
        'supports' => ['title', 'editor', 'thumbnail', 'excerpt', 'custom-fields'],
        'taxonomies' => ['condition_category', 'symptoms'],
        'show_in_rest' => true
    ]);

    // Resources
    register_post_type('resource', [
        'public' => true,
        'has_archive' => true,
        'supports' => ['title', 'editor', 'thumbnail', 'excerpt', 'custom-fields'],
        'taxonomies' => ['resource_type', 'conditions'],
        'show_in_rest' => true
    ]);

    // Success Stories
    register_post_type('success_story', [
        'public' => true,
        'has_archive' => true,
        'supports' => ['title', 'editor', 'thumbnail', 'excerpt', 'custom-fields'],
        'taxonomies' => ['story_category', 'conditions'],
        'show_in_rest' => true
    ]);

    // Services
    register_post_type('service', [
        'public' => true,
        'has_archive' => false,
        'supports' => ['title', 'editor', 'thumbnail', 'excerpt', 'custom-fields'],
        'taxonomies' => ['service_category'],
        'show_in_rest' => true
    ]);
}
```

### 2. Content Relationships
```typescript
interface ContentMapping {
    conditions: {
        source: 'scraped_data/conditions/*.json',
        destination: 'wp_posts',
        post_type: 'condition',
        meta_fields: [
            'symptoms',
            'treatment_approaches',
            'resources',
            'success_stories'
        ]
    },
    resources: {
        source: 'scraped_data/resources/*.json',
        destination: 'wp_posts',
        post_type: 'resource',
        meta_fields: [
            'resource_type',
            'related_conditions',
            'download_files',
            'audio_content'
        ]
    },
    services: {
        source: 'scraped_data/services/*.json',
        destination: 'wp_posts',
        post_type: 'service',
        meta_fields: [
            'service_details',
            'pricing',
            'booking_info',
            'audio_description'
        ]
    }
}
```

## Migration Scripts

### 1. Content Extraction
```typescript
// Extract content from JSON files
async function extractContent(sourceFile: string): Promise<Content[]> {
    const content = await fs.readFile(sourceFile, 'utf8');
    const data = JSON.parse(content);
    
    return data.map(item => ({
        title: sanitizeTitle(item.title),
        content: sanitizeContent(item.content),
        meta: extractMetaData(item),
        relationships: mapRelationships(item)
    }));
}
```

### 2. Content Transformation
```typescript
// Transform content for WordPress
function transformContent(content: Content): WordPressPost {
    return {
        post_title: content.title,
        post_content: content.content,
        post_type: determinePostType(content),
        post_status: 'draft',
        meta_input: transformMetaData(content.meta),
        tax_input: mapTaxonomies(content.relationships)
    };
}
```

### 3. Media Migration
```typescript
// Handle media files
async function migrateMedia(mediaItem: MediaItem): Promise<string> {
    const optimizedMedia = await optimizeMedia(mediaItem);
    const uploadedMedia = await uploadToWordPress(optimizedMedia);
    
    return uploadedMedia.url;
}
```

## Content Processing Rules

### 1. Text Content
```typescript
const contentRules = {
    sanitization: {
        removeHtmlComments: true,
        preserveFormatting: true,
        convertMarkdown: true,
        sanitizeHtml: true
    },
    formatting: {
        convertHeadings: true,
        preserveLists: true,
        maintainLinks: true,
        handleImages: true
    },
    enhancement: {
        addAudioMarkers: true,
        enhanceAccessibility: true,
        optimizeSEO: true
    }
};
```

### 2. Media Processing
```typescript
const mediaRules = {
    images: {
        maxWidth: 1920,
        quality: 85,
        formats: ['webp', 'jpg'],
        generateThumbnails: true
    },
    audio: {
        format: 'mp3',
        bitrate: '128k',
        generateTranscripts: true
    },
    documents: {
        convertToPDF: true,
        optimizePDF: true,
        generatePreviews: true
    }
};
```

## Migration Process

### 1. Pre-Migration Tasks
```typescript
const preMigrationChecks = [
    validateSourceData(),
    checkWordPressConnection(),
    verifyCustomPostTypes(),
    backupExistingContent(),
    prepareMediaDirectory()
];
```

### 2. Migration Execution
```typescript
const migrationSteps = [
    extractContent(),
    transformContent(),
    processMedia(),
    createPosts(),
    establishRelationships(),
    validateMigration()
];
```

### 3. Post-Migration Tasks
```typescript
const postMigrationTasks = [
    verifyContent(),
    checkRelationships(),
    validateMedia(),
    generateReport(),
    cleanupTempFiles()
];
```

## Quality Assurance

### 1. Content Validation
```typescript
const validationChecks = {
    content: {
        checkFormatting: true,
        validateLinks: true,
        checkImages: true,
        verifyMetadata: true
    },
    relationships: {
        validateConnections: true,
        checkTaxonomies: true,
        verifyHierarchy: true
    },
    accessibility: {
        checkAltText: true,
        validateAria: true,
        verifyTranscripts: true
    }
};
```

### 2. Performance Checks
```typescript
const performanceMetrics = {
    mediaOptimization: {
        imageSize: true,
        audioQuality: true,
        documentSize: true
    },
    loadTime: {
        pageLoad: true,
        mediaLoad: true,
        interactionDelay: true
    }
};
```

## Error Handling

### 1. Migration Errors
```typescript
const errorHandling = {
    retryStrategy: {
        maxAttempts: 3,
        delayBetweenAttempts: 1000
    },
    logging: {
        logLevel: 'verbose',
        saveToFile: true,
        notifyOnError: true
    },
    recovery: {
        rollbackOnFailure: true,
        saveCheckpoints: true,
        generateReport: true
    }
};
```

### 2. Content Validation Errors
```typescript
const validationErrors = {
    content: {
        missingRequired: 'error',
        invalidFormat: 'warning',
        brokenLinks: 'warning'
    },
    media: {
        missingFiles: 'error',
        optimizationFailed: 'warning',
        transcriptMissing: 'warning'
    },
    relationships: {
        invalidConnection: 'error',
        missingTaxonomy: 'warning',
        orphanedContent: 'warning'
    }
};
``` 