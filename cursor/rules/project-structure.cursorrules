# Project Structure and Interactive Elements Guide

## Site Structure

### Main Navigation
```typescript
const mainNavigation = {
  home: {
    path: '/',
    sections: ['hero', 'services-overview', 'featured-content']
  },
  services: {
    path: '/services',
    sections: ['advocacy', 'consulting', 'workshops']
  },
  conditions: {
    path: '/conditions',
    sections: ['pathfinder', 'categories', 'resources']
  },
  resources: {
    path: '/resources',
    sections: ['tools', 'guides', 'library']
  },
  community: {
    path: '/community',
    sections: ['stories', 'support', 'events']
  },
  about: {
    path: '/about',
    sections: ['story', 'mission', 'credentials']
  },
  contact: {
    path: '/contact',
    sections: ['booking', 'support', 'emergency']
  }
};
```

## Interactive Features Map

### 1. Condition Pathfinder
```typescript
interface PathfinderFeatures {
  steps: {
    initialAssessment: {
      type: 'questionnaire',
      audioGuidance: true,
      saveProgress: true
    },
    conditionExplorer: {
      type: 'interactive-tree',
      visualization: true,
      audioSupport: true
    },
    resourceMatcher: {
      type: 'dynamic-filter',
      personalization: true,
      exportResults: true
    }
  },
  accessibility: {
    keyboardNavigation: true,
    screenReader: true,
    highContrast: true,
    textResize: true
  }
}
```

### 2. Resource Compass
```typescript
interface ResourceFeatures {
  search: {
    type: 'dynamic',
    filters: ['condition', 'type', 'format'],
    sorting: ['relevance', 'date', 'popularity']
  },
  visualization: {
    type: 'interactive-map',
    clusters: ['type', 'condition', 'location'],
    zoom: true
  },
  interaction: {
    save: true,
    share: true,
    print: true,
    download: true
  }
}
```

### 3. Care Journey Map
```typescript
interface JourneyFeatures {
  timeline: {
    view: 'linear' | 'calendar' | 'milestone',
    tracking: true,
    reminders: true
  },
  milestones: {
    custom: true,
    templates: true,
    sharing: true
  },
  integration: {
    calendar: true,
    notifications: true,
    export: true
  }
}
```

## Page Templates

### 1. Condition Page Template
```typescript
interface ConditionPage {
  layout: {
    header: {
      title: string,
      breadcrumbs: boolean,
      audioIntro: boolean
    },
    sidebar: {
      quickNav: boolean,
      resources: boolean,
      support: boolean
    },
    content: {
      sections: [
        'overview',
        'navigation-support',
        'resources',
        'next-steps'
      ],
      interactive: [
        'pathfinder',
        'resource-finder'
      ]
    }
  }
}
```

### 2. Resource Page Template
```typescript
interface ResourcePage {
  layout: {
    header: {
      title: string,
      type: string,
      accessibility: boolean
    },
    content: {
      format: 'text' | 'video' | 'audio' | 'interactive',
      downloadable: boolean,
      sharable: boolean
    },
    related: {
      resources: boolean,
      conditions: boolean,
      stories: boolean
    }
  }
}
```

## Interactive Components Implementation

### 1. Progress Tracking
```typescript
interface ProgressSystem {
  storage: {
    type: 'local' | 'server',
    encryption: boolean,
    sync: boolean
  },
  features: {
    autoSave: boolean,
    restore: boolean,
    export: boolean
  },
  display: {
    visual: 'bar' | 'circle' | 'steps',
    audio: boolean,
    haptic: boolean
  }
}
```

### 2. Audio Integration
```typescript
interface AudioSystem {
  player: {
    controls: ['play', 'pause', 'speed', 'volume'],
    transcript: boolean,
    highlights: boolean
  },
  content: {
    navigation: boolean,
    descriptions: boolean,
    feedback: boolean
  },
  accessibility: {
    keyboardControls: boolean,
    visualFeedback: boolean,
    screenReader: boolean
  }
}
```

### 3. Form Systems
```typescript
interface FormSystem {
  validation: {
    realTime: boolean,
    submission: boolean,
    accessibility: boolean
  },
  features: {
    autosave: boolean,
    progress: boolean,
    conditional: boolean
  },
  accessibility: {
    errorHandling: boolean,
    keyboardNav: boolean,
    screenReader: boolean
  }
}
```

## Development Workflow

### 1. Component Creation Process
```markdown
1. Design in Figma
   - Component layout
   - Interactive states
   - Accessibility features
   - Responsive variants

2. TypeScript Implementation
   - Interface definition
   - Component structure
   - Accessibility integration
   - State management

3. Testing Setup
   - Unit tests
   - Integration tests
   - Accessibility tests
   - Performance tests
```

### 2. Feature Implementation Checklist
```markdown
1. Accessibility
   - WCAG 2.1 AA compliance
   - Keyboard navigation
   - Screen reader support
   - Audio integration

2. Performance
   - Load time < 3s
   - Smooth animations
   - Efficient state management
   - Optimized assets

3. User Experience
   - Clear feedback
   - Error handling
   - Progress saving
   - Help system
```

## State Management Structure

### 1. Global State
```typescript
interface GlobalState {
  user: {
    preferences: UserPreferences,
    progress: ProgressState,
    savedItems: SavedItems
  },
  accessibility: {
    settings: AccessibilitySettings,
    audioEnabled: boolean,
    contrast: ContrastMode
  },
  navigation: {
    current: string,
    history: string[],
    breadcrumbs: string[]
  }
}
```

### 2. Component State
```typescript
interface ComponentState {
  interaction: {
    active: boolean,
    focused: boolean,
    error: ErrorState
  },
  progress: {
    current: number,
    total: number,
    saved: boolean
  },
  content: {
    loaded: boolean,
    audio: AudioState,
    data: any
  }
}
``` 